// Generated by view binder compiler. Do not edit!
package com.ities45.orion_navigation_bars.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.textview.MaterialTextView;
import com.ities45.orion_navigation_bars.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomToolbarBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ShapeableImageView bluetoothIcon;

  @NonNull
  public final ShapeableImageView drowsinessIcon;

  @NonNull
  public final ShapeableImageView settingsIcon;

  @NonNull
  public final MaterialTextView timeText;

  @NonNull
  public final ShapeableImageView wifiIcon;

  private CustomToolbarBinding(@NonNull ConstraintLayout rootView,
      @NonNull ShapeableImageView bluetoothIcon, @NonNull ShapeableImageView drowsinessIcon,
      @NonNull ShapeableImageView settingsIcon, @NonNull MaterialTextView timeText,
      @NonNull ShapeableImageView wifiIcon) {
    this.rootView = rootView;
    this.bluetoothIcon = bluetoothIcon;
    this.drowsinessIcon = drowsinessIcon;
    this.settingsIcon = settingsIcon;
    this.timeText = timeText;
    this.wifiIcon = wifiIcon;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bluetoothIcon;
      ShapeableImageView bluetoothIcon = ViewBindings.findChildViewById(rootView, id);
      if (bluetoothIcon == null) {
        break missingId;
      }

      id = R.id.drowsinessIcon;
      ShapeableImageView drowsinessIcon = ViewBindings.findChildViewById(rootView, id);
      if (drowsinessIcon == null) {
        break missingId;
      }

      id = R.id.settingsIcon;
      ShapeableImageView settingsIcon = ViewBindings.findChildViewById(rootView, id);
      if (settingsIcon == null) {
        break missingId;
      }

      id = R.id.timeText;
      MaterialTextView timeText = ViewBindings.findChildViewById(rootView, id);
      if (timeText == null) {
        break missingId;
      }

      id = R.id.wifiIcon;
      ShapeableImageView wifiIcon = ViewBindings.findChildViewById(rootView, id);
      if (wifiIcon == null) {
        break missingId;
      }

      return new CustomToolbarBinding((ConstraintLayout) rootView, bluetoothIcon, drowsinessIcon,
          settingsIcon, timeText, wifiIcon);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
